CCTK_ATTRIBUTE_UNUSED const int Nxx0 = params->Nxx0;  // grid::Nxx0
CCTK_ATTRIBUTE_UNUSED const int Nxx1 = params->Nxx1;  // grid::Nxx1
CCTK_ATTRIBUTE_UNUSED const int Nxx2 = params->Nxx2;  // grid::Nxx2
CCTK_ATTRIBUTE_UNUSED const int Nxx_plus_2NGHOSTS0 = params->Nxx_plus_2NGHOSTS0;  // grid::Nxx_plus_2NGHOSTS0
CCTK_ATTRIBUTE_UNUSED const int Nxx_plus_2NGHOSTS1 = params->Nxx_plus_2NGHOSTS1;  // grid::Nxx_plus_2NGHOSTS1
CCTK_ATTRIBUTE_UNUSED const int Nxx_plus_2NGHOSTS2 = params->Nxx_plus_2NGHOSTS2;  // grid::Nxx_plus_2NGHOSTS2
CCTK_ATTRIBUTE_UNUSED const REAL dxx0 = params->dxx0;  // grid::dxx0
CCTK_ATTRIBUTE_UNUSED const REAL dxx1 = params->dxx1;  // grid::dxx1
CCTK_ATTRIBUTE_UNUSED const REAL dxx2 = params->dxx2;  // grid::dxx2
CCTK_ATTRIBUTE_UNUSED const REAL xxmin0 = params->xxmin0;  // grid::xxmin0
CCTK_ATTRIBUTE_UNUSED const REAL xxmin1 = params->xxmin1;  // grid::xxmin1
CCTK_ATTRIBUTE_UNUSED const REAL xxmin2 = params->xxmin2;  // grid::xxmin2
CCTK_ATTRIBUTE_UNUSED const REAL xxmax0 = params->xxmax0;  // grid::xxmax0
CCTK_ATTRIBUTE_UNUSED const REAL xxmax1 = params->xxmax1;  // grid::xxmax1
CCTK_ATTRIBUTE_UNUSED const REAL xxmax2 = params->xxmax2;  // grid::xxmax2
CCTK_ATTRIBUTE_UNUSED const REAL invdx0 = params->invdx0;  // grid::invdx0
CCTK_ATTRIBUTE_UNUSED const REAL invdx1 = params->invdx1;  // grid::invdx1
CCTK_ATTRIBUTE_UNUSED const REAL invdx2 = params->invdx2;  // grid::invdx2
CCTK_ATTRIBUTE_UNUSED const REAL Cart_originx = params->Cart_originx;  // grid::Cart_originx
CCTK_ATTRIBUTE_UNUSED const REAL Cart_originy = params->Cart_originy;  // grid::Cart_originy
CCTK_ATTRIBUTE_UNUSED const REAL Cart_originz = params->Cart_originz;  // grid::Cart_originz
CCTK_ATTRIBUTE_UNUSED const REAL Cart_CoM_offsetx = params->Cart_CoM_offsetx;  // grid::Cart_CoM_offsetx
CCTK_ATTRIBUTE_UNUSED const REAL Cart_CoM_offsety = params->Cart_CoM_offsety;  // grid::Cart_CoM_offsety
CCTK_ATTRIBUTE_UNUSED const REAL Cart_CoM_offsetz = params->Cart_CoM_offsetz;  // grid::Cart_CoM_offsetz
CCTK_ATTRIBUTE_UNUSED const REAL bScale = params->bScale;  // reference_metric::bScale
CCTK_ATTRIBUTE_UNUSED const REAL SINHWAA = params->SINHWAA;  // reference_metric::SINHWAA
CCTK_ATTRIBUTE_UNUSED const REAL AMAX = params->AMAX;  // reference_metric::AMAX
CCTK_ATTRIBUTE_UNUSED const REAL eta_damping = params->eta_damping;  // NRPyElliptic.NRPyElliptic_RHSs::eta_damping
CCTK_ATTRIBUTE_UNUSED const REAL time = params->time;  // NRPyElliptic.NRPyElliptic_RHSs::time
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_bare_mass = params->puncture_0_bare_mass;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_bare_mass = params->puncture_1_bare_mass;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_x = params->puncture_0_x;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_y = params->puncture_0_y;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_z = params->puncture_0_z;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_x = params->puncture_1_x;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_y = params->puncture_1_y;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_z = params->puncture_1_z;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_P_x = params->puncture_0_P_x;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_P_y = params->puncture_0_P_y;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_P_z = params->puncture_0_P_z;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_P_x = params->puncture_1_P_x;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_P_y = params->puncture_1_P_y;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_P_z = params->puncture_1_P_z;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_S_x = params->puncture_0_S_x;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_S_y = params->puncture_0_S_y;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_0_S_z = params->puncture_0_S_z;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_S_x = params->puncture_1_S_x;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_S_y = params->puncture_1_S_y;
CCTK_ATTRIBUTE_UNUSED const REAL puncture_1_S_z = params->puncture_1_S_z;
CCTK_ATTRIBUTE_UNUSED const char * initial_lapse = params->initial_lapse;
CCTK_ATTRIBUTE_UNUSED const REAL lapse_exponent = params->lapse_exponent;
CCTK_ATTRIBUTE_UNUSED const int has_outer_boundary = params->has_outer_boundary;  // CurviBoundaryConditions.CurviBoundaryConditions_new_way::has_outer_boundary
