const int Nxx0 = params->Nxx0;  // grid::Nxx0
const int Nxx1 = params->Nxx1;  // grid::Nxx1
const int Nxx2 = params->Nxx2;  // grid::Nxx2
const int Nxx_plus_2NGHOSTS0 = params->Nxx_plus_2NGHOSTS0;  // grid::Nxx_plus_2NGHOSTS0
const int Nxx_plus_2NGHOSTS1 = params->Nxx_plus_2NGHOSTS1;  // grid::Nxx_plus_2NGHOSTS1
const int Nxx_plus_2NGHOSTS2 = params->Nxx_plus_2NGHOSTS2;  // grid::Nxx_plus_2NGHOSTS2
const REAL            NOSIMDdxx0 = params->dxx0;  // grid::dxx0
const REAL_SIMD_ARRAY dxx0 = ConstSIMD(NOSIMDdxx0);  // grid::dxx0
const REAL            NOSIMDdxx1 = params->dxx1;  // grid::dxx1
const REAL_SIMD_ARRAY dxx1 = ConstSIMD(NOSIMDdxx1);  // grid::dxx1
const REAL            NOSIMDdxx2 = params->dxx2;  // grid::dxx2
const REAL_SIMD_ARRAY dxx2 = ConstSIMD(NOSIMDdxx2);  // grid::dxx2
const REAL            NOSIMDxxmin0 = params->xxmin0;  // grid::xxmin0
const REAL_SIMD_ARRAY xxmin0 = ConstSIMD(NOSIMDxxmin0);  // grid::xxmin0
const REAL            NOSIMDxxmin1 = params->xxmin1;  // grid::xxmin1
const REAL_SIMD_ARRAY xxmin1 = ConstSIMD(NOSIMDxxmin1);  // grid::xxmin1
const REAL            NOSIMDxxmin2 = params->xxmin2;  // grid::xxmin2
const REAL_SIMD_ARRAY xxmin2 = ConstSIMD(NOSIMDxxmin2);  // grid::xxmin2
const REAL            NOSIMDxxmax0 = params->xxmax0;  // grid::xxmax0
const REAL_SIMD_ARRAY xxmax0 = ConstSIMD(NOSIMDxxmax0);  // grid::xxmax0
const REAL            NOSIMDxxmax1 = params->xxmax1;  // grid::xxmax1
const REAL_SIMD_ARRAY xxmax1 = ConstSIMD(NOSIMDxxmax1);  // grid::xxmax1
const REAL            NOSIMDxxmax2 = params->xxmax2;  // grid::xxmax2
const REAL_SIMD_ARRAY xxmax2 = ConstSIMD(NOSIMDxxmax2);  // grid::xxmax2
const REAL            NOSIMDinvdx0 = params->invdx0;  // grid::invdx0
const REAL_SIMD_ARRAY invdx0 = ConstSIMD(NOSIMDinvdx0);  // grid::invdx0
const REAL            NOSIMDinvdx1 = params->invdx1;  // grid::invdx1
const REAL_SIMD_ARRAY invdx1 = ConstSIMD(NOSIMDinvdx1);  // grid::invdx1
const REAL            NOSIMDinvdx2 = params->invdx2;  // grid::invdx2
const REAL_SIMD_ARRAY invdx2 = ConstSIMD(NOSIMDinvdx2);  // grid::invdx2
const REAL            NOSIMDCart_originx = params->Cart_originx;  // grid::Cart_originx
const REAL_SIMD_ARRAY Cart_originx = ConstSIMD(NOSIMDCart_originx);  // grid::Cart_originx
const REAL            NOSIMDCart_originy = params->Cart_originy;  // grid::Cart_originy
const REAL_SIMD_ARRAY Cart_originy = ConstSIMD(NOSIMDCart_originy);  // grid::Cart_originy
const REAL            NOSIMDCart_originz = params->Cart_originz;  // grid::Cart_originz
const REAL_SIMD_ARRAY Cart_originz = ConstSIMD(NOSIMDCart_originz);  // grid::Cart_originz
const REAL            NOSIMDCart_CoM_offsetx = params->Cart_CoM_offsetx;  // grid::Cart_CoM_offsetx
const REAL_SIMD_ARRAY Cart_CoM_offsetx = ConstSIMD(NOSIMDCart_CoM_offsetx);  // grid::Cart_CoM_offsetx
const REAL            NOSIMDCart_CoM_offsety = params->Cart_CoM_offsety;  // grid::Cart_CoM_offsety
const REAL_SIMD_ARRAY Cart_CoM_offsety = ConstSIMD(NOSIMDCart_CoM_offsety);  // grid::Cart_CoM_offsety
const REAL            NOSIMDCart_CoM_offsetz = params->Cart_CoM_offsetz;  // grid::Cart_CoM_offsetz
const REAL_SIMD_ARRAY Cart_CoM_offsetz = ConstSIMD(NOSIMDCart_CoM_offsetz);  // grid::Cart_CoM_offsetz
const REAL            NOSIMDbScale = params->bScale;  // reference_metric::bScale
const REAL_SIMD_ARRAY bScale = ConstSIMD(NOSIMDbScale);  // reference_metric::bScale
const REAL            NOSIMDSINHWAA = params->SINHWAA;  // reference_metric::SINHWAA
const REAL_SIMD_ARRAY SINHWAA = ConstSIMD(NOSIMDSINHWAA);  // reference_metric::SINHWAA
const REAL            NOSIMDAMAX = params->AMAX;  // reference_metric::AMAX
const REAL_SIMD_ARRAY AMAX = ConstSIMD(NOSIMDAMAX);  // reference_metric::AMAX
const REAL            NOSIMDeta_damping = params->eta_damping;  // NRPyElliptic_codegen.NRPyElliptic_RHSs::eta_damping
const REAL_SIMD_ARRAY eta_damping = ConstSIMD(NOSIMDeta_damping);  // NRPyElliptic_codegen.NRPyElliptic_RHSs::eta_damping
const REAL            NOSIMDtime = params->time;  // NRPyElliptic_codegen.NRPyElliptic_RHSs::time
const REAL_SIMD_ARRAY time = ConstSIMD(NOSIMDtime);  // NRPyElliptic_codegen.NRPyElliptic_RHSs::time
const REAL            NOSIMDuu_wavespeed_at_OB = params->uu_wavespeed_at_OB;  // NRPyElliptic_codegen.NRPyElliptic_RHSs::uu_wavespeed_at_OB
const REAL_SIMD_ARRAY uu_wavespeed_at_OB = ConstSIMD(NOSIMDuu_wavespeed_at_OB);  // NRPyElliptic_codegen.NRPyElliptic_RHSs::uu_wavespeed_at_OB
const REAL            NOSIMDvv_wavespeed_at_OB = params->vv_wavespeed_at_OB;  // NRPyElliptic_codegen.NRPyElliptic_RHSs::vv_wavespeed_at_OB
const REAL_SIMD_ARRAY vv_wavespeed_at_OB = ConstSIMD(NOSIMDvv_wavespeed_at_OB);  // NRPyElliptic_codegen.NRPyElliptic_RHSs::vv_wavespeed_at_OB
const REAL            NOSIMDbare_mass_0 = params->bare_mass_0;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::bare_mass_0
const REAL_SIMD_ARRAY bare_mass_0 = ConstSIMD(NOSIMDbare_mass_0);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::bare_mass_0
const REAL            NOSIMDbare_mass_1 = params->bare_mass_1;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::bare_mass_1
const REAL_SIMD_ARRAY bare_mass_1 = ConstSIMD(NOSIMDbare_mass_1);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::bare_mass_1
const REAL            NOSIMDpuncture_0_x = params->puncture_0_x;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_0_x
const REAL_SIMD_ARRAY puncture_0_x = ConstSIMD(NOSIMDpuncture_0_x);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_0_x
const REAL            NOSIMDpuncture_0_y = params->puncture_0_y;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_0_y
const REAL_SIMD_ARRAY puncture_0_y = ConstSIMD(NOSIMDpuncture_0_y);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_0_y
const REAL            NOSIMDpuncture_0_z = params->puncture_0_z;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_0_z
const REAL_SIMD_ARRAY puncture_0_z = ConstSIMD(NOSIMDpuncture_0_z);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_0_z
const REAL            NOSIMDpuncture_1_x = params->puncture_1_x;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_1_x
const REAL_SIMD_ARRAY puncture_1_x = ConstSIMD(NOSIMDpuncture_1_x);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_1_x
const REAL            NOSIMDpuncture_1_y = params->puncture_1_y;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_1_y
const REAL_SIMD_ARRAY puncture_1_y = ConstSIMD(NOSIMDpuncture_1_y);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_1_y
const REAL            NOSIMDpuncture_1_z = params->puncture_1_z;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_1_z
const REAL_SIMD_ARRAY puncture_1_z = ConstSIMD(NOSIMDpuncture_1_z);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::puncture_1_z
const REAL            NOSIMDP0_x = params->P0_x;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P0_x
const REAL_SIMD_ARRAY P0_x = ConstSIMD(NOSIMDP0_x);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P0_x
const REAL            NOSIMDP0_y = params->P0_y;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P0_y
const REAL_SIMD_ARRAY P0_y = ConstSIMD(NOSIMDP0_y);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P0_y
const REAL            NOSIMDP0_z = params->P0_z;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P0_z
const REAL_SIMD_ARRAY P0_z = ConstSIMD(NOSIMDP0_z);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P0_z
const REAL            NOSIMDP1_x = params->P1_x;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P1_x
const REAL_SIMD_ARRAY P1_x = ConstSIMD(NOSIMDP1_x);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P1_x
const REAL            NOSIMDP1_y = params->P1_y;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P1_y
const REAL_SIMD_ARRAY P1_y = ConstSIMD(NOSIMDP1_y);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P1_y
const REAL            NOSIMDP1_z = params->P1_z;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P1_z
const REAL_SIMD_ARRAY P1_z = ConstSIMD(NOSIMDP1_z);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::P1_z
const REAL            NOSIMDS0_x = params->S0_x;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S0_x
const REAL_SIMD_ARRAY S0_x = ConstSIMD(NOSIMDS0_x);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S0_x
const REAL            NOSIMDS0_y = params->S0_y;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S0_y
const REAL_SIMD_ARRAY S0_y = ConstSIMD(NOSIMDS0_y);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S0_y
const REAL            NOSIMDS0_z = params->S0_z;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S0_z
const REAL_SIMD_ARRAY S0_z = ConstSIMD(NOSIMDS0_z);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S0_z
const REAL            NOSIMDS1_x = params->S1_x;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S1_x
const REAL_SIMD_ARRAY S1_x = ConstSIMD(NOSIMDS1_x);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S1_x
const REAL            NOSIMDS1_y = params->S1_y;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S1_y
const REAL_SIMD_ARRAY S1_y = ConstSIMD(NOSIMDS1_y);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S1_y
const REAL            NOSIMDS1_z = params->S1_z;  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S1_z
const REAL_SIMD_ARRAY S1_z = ConstSIMD(NOSIMDS1_z);  // NRPyElliptic_codegen.NRPyElliptic_SourceTerm::S1_z
const int has_outer_boundary = params->has_outer_boundary;  // CurviBoundaryConditions.CurviBoundaryConditions_new_way::has_outer_boundary
const int outer_bc_type = params->outer_bc_type;  // CurviBoundaryConditions.CurviBoundaryConditions_new_way::outer_bc_type
